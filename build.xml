<project name="Modeler" default="jar" basedir=".">


<!--
        "Modeler" component of the Jakarta Commons Subproject
        $Id: build.xml,v 1.12 2003/03/15 00:34:10 costin Exp $
-->


<!-- ========== Initialize Properties ===================================== -->


  <property file="${user.home}/build.properties"/>   <!-- User local        -->
  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->


<!-- ========== External Dependencies ===================================== -->


  <!-- The directories corresponding to your necessary dependencies -->
  <property name="base.path"               value="/usr/local" />
  <property name="jaxp.home"               value="${base.path}/jaxp-1.1"/>
  <property name="junit.home"              value="${base.path}/junit3.7"/>
  <property name="commons.home"            location="../../jakarta-commons"/>
  <property name="sandbox.home"            location="../../jakarta-commons-sandbox"/>
  <property name="beanutils.home"          value="${commons.home}/beanutils"/>
  <property name="collections.home"        value="${commons.home}/collections"/>
  <property name="digester.home"           value="${commons.home}/digester"/>
  <property name="jmx.home"                value="${base.path}/jmx-ri_1.0.1/jmx"/>
  <property name="logging.home"            value="${commons.home}/logging"/>

<!-- ========== Derived Values ============================================ -->


  <!-- The locations of necessary jar files -->
  <property name="ant.jar"                 value="${ant.home}/lib/ant.jar"/>
  <property name="jaxp.jaxp.jar"           value="${jaxp.home}/jaxp.jar"/>
  <property name="jaxp.parser.jar"         value="${jaxp.home}/crimson.jar"/>
  <property name="jaxp.xalan.jar"          value="${jaxp.home}/xalan.jar"/>
  <property name="jmx.jar"                 value="${jmx.home}/lib/jmxri.jar"/>
  <property name="junit.jar"               value="${junit.home}/junit.jar"/>
  <property name="commons-beanutils.jar"   value="${beanutils.home}/dist/commons-beanutils.jar"/>
  <property name="commons-collections.jar" value="${collections.home}/dist/commons-collections.jar"/>
  <property name="commons-digester.jar"    value="${digester.home}/dist/commons-digester.jar"/>
  <property name="commons-logging.jar"     value="${logging.home}/target/commons-logging.jar"/>


<!-- ========== Component Declarations ==================================== -->


  <!-- The name of this component -->
  <property name="component.name"          value="modeler"/>

  <!-- The title of this component -->
  <property name="component.title"         value="Model MBeans Support Package"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.1-dev"/>

  <!-- The base directory for compilation targets -->
  <property name="build.home"              value="target"/>

  <!-- The base directory for component configuration files -->
  <property name="conf.home"               value="src/conf"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home"               value="dist"/>

  <!-- The base directory for component sources -->
  <property name="source.home"             value="src/java"/>

  <!-- The base directory for unit test sources -->
  <property name="test.home"               value="src/test"/>

  <property name="commons-modeler.jar" value="${dist.home}/commons-${component.name}.jar"/>

<!-- ========== Compiler Defaults ========================================= -->


  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${ant.jar}"/>
    <pathelement location="${jaxp.jaxp.jar}"/>
    <pathelement location="${jaxp.parser.jar}"/>
    <pathelement location="${jaxp.xalan.jar}"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jmx.jar}"/>
  </path>


<!-- ========== Test Execution Defaults =================================== -->


  <!-- Construct unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${build.home}/tests"/>
    <pathelement location="${ant.jar}"/>
    <pathelement location="${jaxp.jaxp.jar}"/>
    <pathelement location="${jaxp.parser.jar}"/>
    <pathelement location="${jaxp.xalan.jar}"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jmx.jar}"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <!-- Should all tests fail if one does? -->
  <property name="test.failonerror"        value="true"/>

  <!-- The test runner to execute -->
  <property name="test.runner"             value="junit.textui.TestRunner"/>


<!-- ========== Executable Targets ======================================== -->


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${component.name} ${component.version} --------"/>
    <filter  token="name"                  value="${component.name}"/>
    <filter  token="version"               value="${component.version}"/>
  </target>


  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/conf"/>
    <mkdir dir="${build.home}/tests"/>
  </target>


  <target name="static" depends="prepare"
   description="Copy static files to build directory">
    <tstamp/>
    <copy  todir="${build.home}/conf" filtering="on">
      <fileset dir="${conf.home}" includes="*.MF"/>
    </copy>
  </target>


  <target name="compile-only" >
    <available property="ant16.available"  classname="org.apache.tools.ant.PropertyHelper" />

    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
      <exclude name="org/apache/commons/modeler/ant/*PropertyHelper.java" unless="ant16.available" />
    </javac>
    <copy    todir="${build.home}/classes" filtering="on">
      <fileset dir="${source.home}"
          excludes="**/*.java org/apache/commons/modeler/demo/**"/>
    </copy>
  </target>

  <target name="compile" depends="static,compile-only"
   description="Compile shareable components" />

  <target name="clean"
   description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
  </target>

  <target name="init-dist" >
    <mkdir      dir="${dist.home}"/>
  </target>

  <target name="dist-lite" depends="init-dist,compile,jar"
          description="Dist without javadoc" />

  <target name="all" depends="clean,compile"
   description="Clean and compile all components"/>


  <target name="javadoc" depends="compile" unless="docs-uptodate"
   description="Create component Javadoc documentation">
    <mkdir      dir="${dist.home}"/>
    <mkdir      dir="${dist.home}/docs"/>
    <mkdir      dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${source.home}"
                destdir="${dist.home}/docs/api"
           packagenames="org.apache.commons.*"
                 author="true"
                private="true"
                version="true"
               doctitle="&lt;h1&gt;${component.title} (Version ${component.version})&lt;/h1&gt;"
            windowtitle="${component.title} (Version ${component.version})"
                 bottom="Copyright (c) 2001-2002 - Apache Software Foundation"
           classpathref="compile.classpath" />
  </target>

  <target name="jar" depends="compile-only" > 
    <jar jarfile="${commons-modeler.jar}"
         index="true"
         basedir="${build.home}/classes"
         manifest="src/conf/MANIFEST.MF">
       <include name="org/apache/commons/modeler/**" />
       <include name="META-INF/ant.properties" />
    </jar>
  </target>

  <target name="dist" depends="dist-lite,javadoc"
    description="Create binary distribution">
    <copy      file="../LICENSE"
              todir="${dist.home}"/>
    <copy todir="${dist.home}" >
       <fileset dir="." includes="RELEASE-NOTES**"/>
    </copy>

    <copy      file="src/java/org/apache/commons/modeler/mbeans-descriptors.dtd"
              todir="${dist.home}"/>
    <mkdir      dir="${build.home}/classes/META-INF"/>
    <copy      file="../LICENSE"
             tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
  </target>


<!-- ========== Unit Test Targets ========================================= -->


  <target name="compile.tests" depends="compile"
   description="Compile unit test cases">
    <javac  srcdir="${test.home}"
           destdir="${build.home}/tests"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="test.classpath"/>
    </javac>
    <copy    todir="${build.home}/tests" filtering="on">
      <fileset dir="${test.home}" excludes="**/*.java"/>
    </copy>
  </target>


  <target name="test"  depends="compile.tests,
                                test.Registry"
   description="Run all unit test cases">
  </target>


  <target name="test.Registry">
    <echo message="Running Registry tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="org.apache.commons.modeler.RegistryTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

<!-- ========== Demonstration Targets ===================================== -->


  <target name="demo" depends="compile.tests"
   description="Run demostration application">
    <java classname="org.apache.commons.modeler.demo.Demo" fork="yes">
      <classpath refid="test.classpath"/>
    </java>
  </target>


</project>
